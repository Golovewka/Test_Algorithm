
Test_Algorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000184  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000320  00010320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00010320  2**0
                  CONTENTS
  4 .ARM          00000000  08000318  08000318  00010320  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000318  08000320  00010320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010320  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000079e  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002cf  00000000  00000000  00010aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000113  00000000  00000000  00010dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b8  00000000  00000000  00010ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000070  00000000  00000000  00010f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00016894  00000000  00000000  00010ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001512  00000000  00000000  0002788c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00082ef8  00000000  00000000  00028d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  000abc96  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000000d4  00000000  00000000  000abce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000300 	.word	0x08000300

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000300 	.word	0x08000300

080001d4 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d4:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <SystemInit+0x10>)
 80001d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80001da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e2:	4770      	bx	lr
 80001e4:	e000ed00 	.word	0xe000ed00

080001e8 <CLOCK_init>:
 *@brief Функция инициализации системы тактирования
 */
void CLOCK_init (void)
{

	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; // Делитель шины APB2: 1
 80001e8:	4b16      	ldr	r3, [pc, #88]	; (8000244 <CLOCK_init+0x5c>)
 80001ea:	685a      	ldr	r2, [r3, #4]
 80001ec:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; // Делитель шины APB1: 2
 80001ee:	685a      	ldr	r2, [r3, #4]
 80001f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80001f4:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;  // Делитель шины AHB: 1
 80001f6:	685a      	ldr	r2, [r3, #4]
 80001f8:	605a      	str	r2, [r3, #4]

	//RCC->CFGR |= RCC_CFGR_SW_HSI;           // Основной источник тактирвания: HSI
	//while(!(RCC->CFGR & RCC_CFGR_SWS_HSI)); // Ожидание переключения на HSI

	RCC->CR &= ~RCC_CR_PLLON;       // Выключение PLL
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000200:	601a      	str	r2, [r3, #0]
	while(RCC->CR & RCC_CR_PLLRDY); // Ожидание выключения PLL
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	0190      	lsls	r0, r2, #6
 8000206:	d4fc      	bmi.n	8000202 <CLOCK_init+0x1a>

	RCC->CFGR |= RCC_CFGR_PLLNODIV;             // Делитель перед PLL: выкл
 8000208:	6859      	ldr	r1, [r3, #4]
	RCC->CFGR |= (0x07 << RCC_CFGR_PLLMUL_Pos); // Умножение PLL: 9
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_PREDIV;    // Источник тактирования PLL: HSI

	RCC->CR |= RCC_CR_PLLON;           // Включение PLL
	while(!(RCC->CR & RCC_CR_PLLRDY)); // Ожидание включения PLL
 800020a:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <CLOCK_init+0x5c>)
	RCC->CFGR |= RCC_CFGR_PLLNODIV;             // Делитель перед PLL: выкл
 800020c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000210:	6059      	str	r1, [r3, #4]
	RCC->CFGR |= (0x07 << RCC_CFGR_PLLMUL_Pos); // Умножение PLL: 9
 8000212:	6859      	ldr	r1, [r3, #4]
 8000214:	f441 11e0 	orr.w	r1, r1, #1835008	; 0x1c0000
 8000218:	6059      	str	r1, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_PREDIV;    // Источник тактирования PLL: HSI
 800021a:	6859      	ldr	r1, [r3, #4]
 800021c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000220:	6059      	str	r1, [r3, #4]
	RCC->CR |= RCC_CR_PLLON;           // Включение PLL
 8000222:	6819      	ldr	r1, [r3, #0]
 8000224:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000228:	6019      	str	r1, [r3, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)); // Ожидание включения PLL
 800022a:	6813      	ldr	r3, [r2, #0]
 800022c:	0199      	lsls	r1, r3, #6
 800022e:	d5fc      	bpl.n	800022a <CLOCK_init+0x42>

	RCC->CFGR |= RCC_CFGR_SW_PLL;           // Основной источник тактирвания: PLL
 8000230:	6853      	ldr	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)); // Ожидание переключения на PLL
 8000232:	4904      	ldr	r1, [pc, #16]	; (8000244 <CLOCK_init+0x5c>)
	RCC->CFGR |= RCC_CFGR_SW_PLL;           // Основной источник тактирвания: PLL
 8000234:	f043 0302 	orr.w	r3, r3, #2
 8000238:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)); // Ожидание переключения на PLL
 800023a:	684b      	ldr	r3, [r1, #4]
 800023c:	071b      	lsls	r3, r3, #28
 800023e:	d5fc      	bpl.n	800023a <CLOCK_init+0x52>

}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000

08000248 <FLASH_init>:
 * @brief Функция инициализации задержек памяти
 */
void FLASH_init (void)
{

	FLASH->ACR |= FLASH_ACR_LATENCY_1; // Задержки памяти: 2 состояния ожидания
 8000248:	4a02      	ldr	r2, [pc, #8]	; (8000254 <FLASH_init+0xc>)
 800024a:	6813      	ldr	r3, [r2, #0]
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6013      	str	r3, [r2, #0]

}
 8000252:	4770      	bx	lr
 8000254:	40022000 	.word	0x40022000

08000258 <main>:
#include "stm32f303xe.h"
#include "flash.h"
#include "clock.h"

int main(void)
{
 8000258:	b508      	push	{r3, lr}

	FLASH_init();
 800025a:	f7ff fff5 	bl	8000248 <FLASH_init>
	CLOCK_init();
 800025e:	f7ff ffc3 	bl	80001e8 <CLOCK_init>

	while (1)
 8000262:	e7fe      	b.n	8000262 <main+0xa>

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000268:	f7ff ffb4 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 f811 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ffdf 	bl	8000258 <main>

0800029a <LoopForever>:

LoopForever:
    b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a8:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC1_2_IRQHandler>
	...

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	4d0d      	ldr	r5, [pc, #52]	; (80002f0 <__libc_init_array+0x38>)
 80002bc:	4c0d      	ldr	r4, [pc, #52]	; (80002f4 <__libc_init_array+0x3c>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	2600      	movs	r6, #0
 80002c4:	42a6      	cmp	r6, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	4d0b      	ldr	r5, [pc, #44]	; (80002f8 <__libc_init_array+0x40>)
 80002ca:	4c0c      	ldr	r4, [pc, #48]	; (80002fc <__libc_init_array+0x44>)
 80002cc:	f000 f818 	bl	8000300 <_init>
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	2600      	movs	r6, #0
 80002d6:	42a6      	cmp	r6, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e0:	4798      	blx	r3
 80002e2:	3601      	adds	r6, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ea:	4798      	blx	r3
 80002ec:	3601      	adds	r6, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	08000318 	.word	0x08000318
 80002fc:	0800031c 	.word	0x0800031c

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
